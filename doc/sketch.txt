## Requirements

The front controller needs to:

- Get the HTTP request
- Pass the HTTP request to the kernel for it to be handled
- Produce an HTTP response

The kernel needs to:

- Get the controller hook mapped to the HTTP request
- Call the controller hook and pass the environment (i.e. server variables) to the controller
- Return to the caller the HTTP response generated by the controller

The controller needs to:

- Get the template to be rendered by the view
- Get the view that will render the templates
- Send back a response
- Get the model?


## Architecture

...


## Sequence of Operation

The following diagram represents the operation sequence of the framework:

```
                                  +---------------------------------------+
                                  | KERNEL                                |
                                  |                                       |
+--------+                        |    .------.             .--------.    |                          +--------+
| CLIENT +----- Http Request -----+-->| Handle |           | Dispatch |---+----- Http Response ----->| CLIENT |
+--------+                        |    '--+---'             '-----+--'    |                          +--------+
                                  |       |                       |       |
                                  |       |                       |       |
                                  +-------+-----------------------+-------+
                                          |                       |
                                          |                       |
                                       Request                Controller
                                    URI & method                 Hook
                                          |                       |
                                          |                       |
                                  +-------+-----------------------+-------+
                                  | ROUTER|                       |       |
                                  |       |                       |       |
                                  |       |    .--------------.   |       |
                                  |       '-->| Get Controller |--'       |
                                  |            '--------------'           |
                                  |                   ^                   |
                                  |                   |                   |
                                  |                   |                   |
                                  |              -----------              |
                                  |              Route Table              |
                                  |              -----------              |
                                  |                                       |
                                  +---------------------------------------+
```


## The app lives in an environment

The application lives in an environment. The natural task of an application is to provide a requested resource. To do this, the application must know what resource was requested so that it can respond. The surrounding environment includes the HTTP response and HTTP response.

+----------------------------------+
|                                  |
|   .-------.         .--------.   |
|  ( Request )       ( Response )  |
|   '-------'\       /'--------'   |
|             \     /              |
|              \   /               |
|             .-`-'-.              |
|            (  App  )             |
|             '-----'              |
|                                  |
+----------------------------------+
D: Demonstration of environment.


## Useful error messages

A framework that reports errors like a compiler. Emitted errors should be useful. They should tell the developer what happened and how the error may be fixed. These errors should be emitted to a log. Do not return these errors reports to the client. The client must not knoww anything about the internal working of the application. Therefore, a standard error response shall be returned. It must say something to the likes of, "Something went wrong." But behind the scenes, the error log will contain details of the error.


## Route controller specifier syntax

    To specify a controller in a route, we use a special syntax. This syntax
    makes it easy for the programmer to name the action and controller and
    makes it easy for them to read.

        - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        Format:         action@controller
        Example:        main@Admin.DashboardController
        Snippet:        Route::get('/', 'main@Admin.DashboardController');

        File address:   app/controller/admin/DashboardController.php
        Source code:    class DashboardController {
                            public function main()
                            {
                                ...
                            }
                        }
        - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


    ### How to read the format:

    1. `action@...` specifies a method name in the class.

    2. `...@controller` specifies the location of the class file in the app
       controller directory.

    3. `main@...` specifies the `main` method (i.e. `DashboardController->main()`).

    4. `...@admin.DashboardController` specifies the location of the class file.
       The '.' (dot) character is used as a directory separator. Where we would
       have the forwardslash or backslash, a dot is used instead for it enhances
       readability when compared to the aforementioned forwardslash and backslash
       characters.


    ### Syntax specification in EBNF:

    (* The production `id` matches an identifier *)

    controller_decl =
        action_part "@" controller_part ;

    action_part =
        id ;

    controller_part =
        {directory "."} controller ;

    controller =
        id;

    directory =
        id;


## Route placeholder syntax

    ## Placeholder:

    A placeholder has a syntax of a your typical identifier. It can only
    contain letters, numbers and an underscore, and must not begin with
    a number. The body of the identifier is preceded by a colon. I stole
    this concept from the Slim framework.


    ## Syntax specification in EBNF:

    placeholder =
        ":" id ;


## Template specifier syntax

    To specify a template, I use a syntax that tells the framework what template
    to use and where the template is located. I stole this concept from Laravel.

    A template specifier has the name of the template and can be preceded by the
    names of the subdirectories in which the template is located. When specifying
    a template, the template name is stated plainly. However, if the template is
    located in subdirectories below the template directory, then the names of the
    subdirectories are specified and separated by the '.' (dot) character.


    ## Example 1: A template file located at the root of template directory

    A file located at `/app/template/404.php` takes the specifier form of `404`.
    Its view maybe instantiated as: `new View('404')'`;


    ## Example 2: A template file located in a subdirectory of the root of the
    template directory.

    A file located at `/app/template/error/404.php` takes the specifier form of
    `error.404`. Notice that the template specifier mirrors the location of the
    template file. The view for this template may be instantiated as:
    `new View('Error.404');


    ## Syntax specification in EBNF:

    view_decl =
        {directory "."} view ;

    view =
        id;

    directory =
        id;

        
## Components

**How do components relate to each other?**

### Concept

The framework is broken down into components. The purpose of a component lies in decoupling and reusability.

A *component* is made up of models, interfaces, abstracts, and subcomponents.

A *subcomponent* is like a component, only difference is this: It's parent has a parent component. Subcomponents can nest in other subcomponents.

### Convention

Components are represented by folders and model, interfaces, abstracts are presented as class files.

```
\Octagon\Routing                     // Component (folder)
\Octagon\Routing\Route.php           // Model
\Octagon\Routing\RouteInterface.php  // Interface
```